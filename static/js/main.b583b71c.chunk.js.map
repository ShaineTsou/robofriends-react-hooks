{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","containers/App.js","reportWebVitals.js","index.js"],"names":["SearchBox","searchChange","className","type","placeholder","onChange","Card","id","name","email","alt","src","CardList","robots","map","user","Scroll","props","style","overflowY","height","children","App","useState","setRobots","useEffect","fetch","then","response","json","users","searchfield","setSearchfield","filteredRobots","filter","robot","toLowerCase","includes","length","event","target","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"2OAeeA,EAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjB,OACI,qBAAKC,UAAU,KAAf,SACI,uBACAA,UAAU,mCACVC,KAAK,SACLC,YAAY,gBACZC,SAAaJ,OCGVK,EAVF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACtB,OACI,sBAAKP,UAAU,sDAAf,UACI,qBAAKQ,IAAI,SAASC,IAAG,+BAA2BJ,EAA3B,4BACrB,6BAAMC,IACN,4BAAKC,QCeFG,EAnBE,SAAC,GAAiB,IAAdC,EAAa,EAAbA,OACjB,OACI,8BAEQA,EAAOC,KAAI,SAACC,GACR,OACI,cAAC,EAAD,CAEIR,GAAKQ,EAAKR,GACVC,KAAOO,EAAKP,KACZC,MAAQM,EAAKN,OAHPM,EAAKR,UCAxBS,EARA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,QAA1C,SACKH,EAAMI,Y,MCuCJC,MAtCf,WAAe,MAUiBC,mBAAS,IAV1B,mBAUJV,EAVI,KAUIW,EAVJ,KAWXC,qBAAU,WACNC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAIN,EAAUM,QAC1B,IAfQ,MAiB2BP,mBAAS,IAjBpC,mBAiBJQ,EAjBI,KAiBSC,EAjBT,KAsBLC,EAAiBpB,EAAOqB,QAAO,SAAAC,GACjC,OAAOA,EAAM3B,KAAK4B,cAAcC,SAASN,EAAYK,kBAEzD,OAAQvB,EAAOyB,OAGX,sBAAKpC,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWD,aAZI,SAACsC,GACpBP,EAAeO,EAAMC,OAAOC,UAYxB,cAAC,EAAD,UACI,cAAC,EAAD,CAAU5B,OAASoB,SAN/B,oBAAI/B,UAAU,KAAd,sBCpBWwC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACD,cAAC,EAAD,IACJC,SAASC,eAAe,SAM5BX,M","file":"static/js/main.b583b71c.chunk.js","sourcesContent":["import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n    return(\n        <div className='tc'>\n            <input \n            className='pa3 ba b--green bg-lightest-blue' \n            type='search' \n            placeholder='search robots'\n            onChange = { searchChange }\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Card = ({ id, name, email }) => {\n    return (\n        <div className='tc bg-light-green dib br4 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${ id }?set=set4&size=200x200`} />\n            <h2>{ name }</h2>\n            <p>{ email }</p>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ( { robots }) => {\n    return (\n        <div>\n            { \n                robots.map((user) => {\n                    return (\n                        <Card \n                            key={ user.id } \n                            id={ user.id } \n                            name={ user.name } \n                            email={ user.email } \n                        />\n                    );\n                }) \n            }\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', height: '75vh'}}>\n            {props.children}\n        </div>\n    )\n};\n\nexport default Scroll;","import React, { useEffect, useState } from 'react';\nimport SearchBox from '../components/SearchBox';\nimport CardList from '../components/CardList';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\nfunction App() {\n    /* \n    When the App function runs, it creates the initial state, after the first render it runs useEffect.\n    The userEffect will update the robots state, which is another render, so userEffect gets run again, causing a continuous loop.\n    Ideally, the useEffect hook with a fetch method should only run once.\n    */\n    /* \n    To avoid useEffect runs over and over again, add an empty array instead of any state variable as the second argument.\n    After the component mounts, the empyt array will no longer change, so the useEffect hook will only run initially.\n    */\n    const [robots, setRobots] = useState([]);\n    useEffect(() => {\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => setRobots(users));\n    }, []) \n    \n    const [searchfield, setSearchfield] = useState('')\n    const onSearchChange = (event) => {\n        setSearchfield(event.target.value);\n    }\n    \n    const filteredRobots = robots.filter(robot => {\n        return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    })\n    return !robots.length ? \n    <h1 className='tc'>Loading</h1> : \n    (\n        <div className='tc'>\n            <h1 className='f1'>RoboFriends</h1>\n            <SearchBox searchChange={ onSearchChange } />\n            <Scroll>\n                <CardList robots={ filteredRobots } />\n            </Scroll>\n        </div>\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(\n        <App />,\n    document.getElementById('root')\n    );\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}